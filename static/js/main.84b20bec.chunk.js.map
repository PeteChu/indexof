{"version":3,"sources":["components/IndexOfList.js","components/IndexOfTable.js","App.js","serviceWorker.js","index.js"],"names":["IndexOfList","props","id","icon","href","homepage","name","github","repoName","description","IndexOfTable","data","map","repo_name","key","className","alt","colSpan","this","_renderIndexOfList","dataSource","Component","App","datasource","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qtBAiBeA,EAfK,SAAAC,GAClB,OACE,4BACE,wBAAIC,GAAG,QAAQD,EAAME,MACrB,wBAAID,GAAG,QACL,uBAAGE,KAAMH,EAAMI,UAAY,KAAMJ,EAAMK,OAEzC,wBAAIJ,GAAG,UACL,uBAAGE,KAAMH,EAAMM,QAASN,EAAMO,WAEhC,wBAAIN,GAAG,eAAeD,EAAMQ,eCqCnBC,E,2LA7CMC,GAgBjB,OAfoBA,EAAKC,KACvB,YAA+D,IAA5DN,EAA2D,EAA3DA,KAAMH,EAAqD,EAArDA,KAAMI,EAA+C,EAA/CA,OAAQM,EAAuC,EAAvCA,UAAWR,EAA4B,EAA5BA,SAAUI,EAAkB,EAAlBA,YAC1C,OACE,kBAAC,EAAD,CACEK,IAAKR,EACLA,KAAMA,EACNH,KAAMA,EACNI,OAAQA,EACRF,SAAUA,EACVG,SAAUK,EACVJ,YAAaA,S,+BASrB,OACE,yBAAKM,UAAU,IACb,+BACE,+BACE,4BACE,4BACE,yBAAKC,IAAI,MAEX,oCACA,sCACA,4CAEF,4BACE,wBAAIC,QAAQ,IAAIF,UAAU,IACxB,wBAAIA,UAAU,OAGjBG,KAAKC,mBAAmBD,KAAKjB,MAAMmB,mB,GAtCrBC,a,aCWZC,MATf,WACE,OACE,yBAAKP,UAAU,OACb,iDACA,kBAAC,EAAD,CAAcK,WAAYG,MCGZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.84b20bec.chunk.js","sourcesContent":["import React from \"react\";\n\nconst IndexOfList = props => {\n  return (\n    <tr>\n      <td id=\"icon\">{props.icon}</td>\n      <td id=\"name\">\n        <a href={props.homepage || \"#\"}>{props.name}</a>\n      </td>\n      <td id=\"github\">\n        <a href={props.github}>{props.repoName}</a>\n      </td>\n      <td id=\"description\">{props.description}</td>\n    </tr>\n  );\n};\n\nexport default IndexOfList;\n","import React, { Component } from \"react\";\nimport IndexOfList from \"./IndexOfList\";\n\nclass IndexOfTable extends Component {\n  _renderIndexOfList(data) {\n    const indexOfList = data.map(\n      ({ name, icon, github, repo_name, homepage, description }) => {\n        return (\n          <IndexOfList\n            key={name}\n            name={name}\n            icon={icon}\n            github={github}\n            homepage={homepage}\n            repoName={repo_name}\n            description={description}\n          />\n        );\n      }\n    );\n    return indexOfList;\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                <img alt=\"\"></img>\n              </th>\n              <th>Name</th>\n              <th>Github</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <th colSpan=\"5\" className=\"\">\n                <hr className=\"\"></hr>\n              </th>\n            </tr>\n            {this._renderIndexOfList(this.props.dataSource)}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default IndexOfTable;\n","import React from \"react\";\nimport IndexOfTable from \"./components/IndexOfTable\";\nimport datasource from \"./models/datasource\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Index of /petechu</h1>\n      <IndexOfTable dataSource={datasource} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}